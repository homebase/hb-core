<?php

/**
 * GLOBAL NAMESPACE FUNCTIONS
 *
 * @param mixed $spec
 */

/**
 * Dependency Injection Container
 * I::service()             // Autogenerated class with return class Tips for Editors
 * I(service)
 * I(service, $spec)        // service instance spec scalar or [key => value]
 * Example: i('db', "ConnectionName"), i('log', ['host' => 'x', 'port' => 514])
 *
 * @see I::set($service, $spec, $instance)
 * @see I::reset($service, $spec)
 */
function I(string $name, /* array | string */ $spec = []): object {
    // instance
    $key = '[]';
    if (!is_array($spec)) {
        $spec = [$spec];
    }
    if ($spec) {
        if (count($spec) > 1) {
            ksort($spec);   // key order is unimportant
        }
        $key = json_encode($spec);
    }
    if ($o = \hb\HB::$I[$name][$key] ?? null) {
        return $o;
    }

    return \hb\I::_get($name, $spec, $key);
}

/**
 * \hb\Object instances created using their own factory controller: method i(...$params)
 *
 * @param array ...$p
 *
 * @-return Instance
 */
function iNew(string $className, ...$p) {
    // Instance
    error_unless($className, 'iNew(empty-string)');
    if (is_a($className, '\hb\contracts\IConfig', true)) {
        return $className::i(...$p);
    }
    // v("iNew: $className");
    return new $className(...$p);
}

/**
 * Global functions
 *
 * @param null|mixed $default
 */

/**
 * Config Access
 *   C("node")           - Value of node or Exception
 *   C("node", $default) - Value of node or default
 *
 * @C("node") - Value of node or null
 * @C("node") ?? $default - Value of node or $default
 *   C()                 - Config Instance == i('fw.config')
 */
function C(string $path = '', $default = null) {
    // mixed
    // v("C($path)");
    $r = \hb\HB::$CONFIG[$path] ?? null;
    if (null !== $r) {
        return $r;
    }
    if (array_key_exists($path, \hb\HB::$CONFIG)) { // NULL stored
        return $default;
    }
    $r0 = i('config')->_get($path);
    if ($r0) {
        return \hb\HB::$CONFIG[$path] = $r0[0];
    }
    // error_if($r0 === null, "Config path error: '$path'");
    // NODE-NOT FOUND CASE
    \hb\HB::$CONFIG[$path] = null;  // save missing node case
    if (2 === func_num_args()) {
        return $default;
    }
    if (!\hb\isSuppressed()) { // @C(node)
        // i('config')->dirty = 0; // avoid saving config
        unset(\hb\HB::$CONFIG[$path]); // avoid SAVING missing NODES

        throw new \hb\ConfigNotFoundError($path); // CODING ERROR
    }
}

// Model - Dependency Injection Container
// Implementation same as I(..) ()
// Difference in usage pattern
// Config stored in "model.$model"
// Ex:
//   M("User", $id)->action()
//   M::User($id)
//
function Model(string $model, /* int | string */ $id): hb\tp\Model {
    error_unless(is_int($id) || is_string($id), 'Model id should be string or int');

    return i('model', $model)[$id];
}

/**
 * Schema instance
 * Usage:
 *   $sh = Schema("$name");          // new empty SH - named schema
 *   $sh = Schema((array) $schema);  // new custom schema, (optional) name in $schema['']['name']
 *   $sh = Schema($name, $data);     // new object. validate/sanitize $data
 *   $validated_array = Schema($name, $data)();  // validated/sanitized $data as array
 *   $sh = Schema($name)->ref($data);  // using reference to existing array, validate/sanitize
 *   $sh = Schema($name)->ref($data, false);  // using reference to existing array, no validation/sanitation
 *
 * @see Schema
 *
 * @param mixed $schema
 */
function Schema(/* string | array */ $schema, array $data = []): hb\tp\Schema {
    $sh = \hb\tp\Schema::i($schema);

    return $data ? $sh->reset($data) : $sh;
}

// Usage:
//  function XX() { $p = profiler("", ...$args); ..... }   - name - Class::method
//  function XX() { $p = profiler("XX", ...$args); ..... }
//  function XX() { $p = profiler("XX", ...$args); .....; $p->out(...$args) }
//  function XX() { $p = profiler("XX", ...$args); .....; $p->args(...$args) }
function profiler($what, $args = [], array $opts = []): hbc\profiler\ProfilerI {
    return \hbc\profiler\Profiler::$profiler->i($what, (array) $args, $opts);
}

/**
 * Visitors:             i('profilerOff')
 * Admin(IP or Cookie):  i('profilerOn')
 */
function iProfiler() {
    return \hbc\profiler\Profiler::$profiler; //, may be updated by disable() call
}

// echo parameters to ADMINs && cli
function v(...$args) {
    // void
    if (!\hb\is_admin()) {
        return;
    }
    echo _v($args, \hb\caller());
}

// v(...$args) then die
function vd(...$args) {
    // void
    if (!\hb\is_admin()) {
        return;
    }
    echo _v($args, \hb\caller());

    exit;
}

function _v(array $args, $caller) {
    $cli = PHP_SAPI === 'cli';
    $r = [];
    foreach ($args as $a) {
        if (is_array($a)) { // compact array presentation
            $s = [];
            $z = 0;
            foreach ($a as $k => $i) {
                $p = is_scalar($i) ? $i : var_export($i, true);
                if ($z !== $k) {
                    $p = (is_int($k) ? $k : "'$k'").' => '.$p;
                }
                $s[] = $p;
                ++$z;
            }
            $a = '['.implode(', ', $s).']';
        }
        $r[] = is_scalar($a) ? $a : var_export($a, true);
    }
    $r = implode("\n", $r);
    $acaller = \hb\HB::fileAbbrev($caller);

    return $cli ?
            "$r\n$caller\n" :
            "\n<div class=admin style='border: 1px dashed #aaa; padding-left: 5px'>".
                "<xmp style='font-family:courier; font-size: 12px'>$r</xmp><small>@ <a href='edit:$caller'>$acaller</a></small>".
                "</div>\n";
}

/**
 * throw exception if ...
 * Copied from laravel: https://laravel-news.com/throw_if-throw_unless
 *
 * @psalm-suppress InvalidThrow
 *
 * @param Exception|string $exception [description]
 * @param mixed            $boolean
 */
function throw_if($boolean, $exception, string $message = '') {
    if ($boolean) {
        throw (is_string($exception) ? new $exception($message) : $exception);
    }
}

/**
 * throw exception if ...
 * Copied from laravel: https://laravel-news.com/throw_if-throw_unless
 *
 * @psalm-suppress InvalidThrow
 *
 * @param Exception|string $exception [description]
 * @param mixed            $boolean
 */
function throw_unless($boolean, $exception, string $message = '') {
    if (!$boolean) {
        throw (is_string($exception) ? new $exception($message) : $exception);
    }
}

/**
 * non recoverable Error -  developer uses Code Incorrect Way
 * throw \hb\Error exception if ...
 *
 * @param mixed $boolean
 */
function error_if($boolean, string $message) {
    if ($boolean) {
        throw new \hb\Error($message);  // \Error descendant
    }
}

/**
 * non recoverable Error -  developer uses Code Incorrect Way
 * throw \hb\Error exception if ...
 *
 * @param mixed $boolean
 */
function error_unless($boolean, string $message) {
    if (!$boolean) {
        throw new \hb\Error($message);  // \Error descendant
    }
}

#function error(string $message) {
#    throw new \hb\Error($message);  // \Error descendant
#}
